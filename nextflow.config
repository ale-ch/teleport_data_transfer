/**************************** Basic parameters ****************************/

params {
    // User input parameters
    src_list_path = ""
    dst = ""
}

// Process-specific configuration
process {
    executor = "pbspro"
    queue = "nocg_workq"
    maxForks = 4 // Maximum parallel jobs for the 'local' executor
}

/**************************** Profiles ****************************/

profiles {
    debug { process.beforeScript = "echo $HOSTNAME" }

    docker {
        docker.enabled         = true
        docker.userEmulation   = { params.use_gatk_spark ? false : true }.call()
        charliecloud.enabled   = false
        podman.enabled         = false
        shifter.enabled        = false
        singularity.enabled    = false
        //process.container = "docker://yinxiu/variantalker:v1.0"
    }

    singularity {
        singularity.autoMounts = true
        singularity.enabled    = true
        singularity.runOptions = " --bind /hpcnfs/ --bind /hpcscratch "
        charliecloud.enabled   = false
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        //process.container = "docker://yinxiu/variantalker:v1.0"
    }
}

/**************************** Tower ****************************************************/

tower {
    enabled = true
}

// Function to ensure that resource requirements don't go beyond a maximum limit
def check_max(obj, type) {
    if (type == "memory") {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == "time") {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == "cpus") {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
